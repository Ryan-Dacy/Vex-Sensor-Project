{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT3, ratio18_1, true);\nmotor leftMotorB = motor(PORT5, ratio18_1, true);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT12, ratio18_1, false);\nmotor rightMotorB = motor(PORT11, ratio18_1, false);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ninertial DrivetrainInertial = inertial(PORT10);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 319.19, 320, 40, mm, 1);\n\nmotor Motor17 = motor(PORT17, ratio18_1, false);\n\nmotor Motor18 = motor(PORT18, ratio18_1, false);\n\ndigital_out DigitalOutB = digital_out(Brain.ThreeWirePort.B);\ncontroller Controller1 = controller(primary);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\nvoid vexcodeInit() {\n\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n\n#include \"vex.h\"\nusing namespace vex;\n\n#define BAUDRATE 115200\nmotor ArduinoMotor = motor(PORT20, ratio18_1, false);\n\nchar sensorName[64] = \"UNKNOWN\";\nbool nameReceived = false;\nint receivedValue = 0;\n\nvoid processSensorData() {\n    char incomingChar;\n    int index = 0;\n\n    while (true) {\n        int available = vexGenericSerialReceiveAvail(ArduinoMotor.index());\n\n        if (!nameReceived && available > 0) {\n            // Read the sensor name until newline\n            while (vexGenericSerialReceiveAvail(ArduinoMotor.index()) > 0) {\n                incomingChar = vexGenericSerialReadChar(ArduinoMotor.index());\n\n                if (incomingChar == '\\n' || index >= sizeof(sensorName) - 1) {\n                    sensorName[index] = '\\0'; // Null-terminate the string\n                    nameReceived = true;\n                    break;\n                } else {\n                    sensorName[index++] = incomingChar;\n                }\n            }\n        } \n        else if (nameReceived && available >= 2) {\n            // Read sensor value\n            int highByte = vexGenericSerialReadChar(ArduinoMotor.index());\n            int lowByte = vexGenericSerialReadChar(ArduinoMotor.index());\n            receivedValue = (highByte << 8) | lowByte;\n\n            // Display both name and value\n            Brain.Screen.clearScreen();\n            Brain.Screen.setCursor(1, 1);\n            Brain.Screen.print(\"Sensor Type: %s\", sensorName);\n            Brain.Screen.newLine();\n            Brain.Screen.print(\"Sensor Data: %d\", receivedValue);\n        }\n\n        task::sleep(50);\n    }\n}\n\nvoid driveRobot() {\n    Drivetrain.setDriveVelocity(35, percent);\n    while (true) {\n        if (receivedValue < 135) {\n            Drivetrain.drive(forward);\n        } else {\n            Drivetrain.stop();\n            Drivetrain.driveFor(reverse, 100, inches);\n            Drivetrain.stop();\n        }\n        task::sleep(50);\n    }\n}\n\nint main() {\n    vexcodeInit();\n    vexGenericSerialEnable(ArduinoMotor.index(), 0);\n    vexGenericSerialBaudrate(ArduinoMotor.index(), BAUDRATE);\n\n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.print(\"Starting threads...\");\n\n    thread sensorThread = thread(processSensorData);\n    thread driveThread = thread(driveRobot);\n\n    while (true) {\n        task::sleep(100);\n    }\n}\n\n","textLanguage":"cpp","robotConfig":[{"port":[3,5,12,11,10],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"rev","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[17],"name":"Motor17","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[18],"name":"Motor18","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"DigitalOutB","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.3","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}